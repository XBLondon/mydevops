name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: |
          if [ -d "auth-service" ]; then cd auth-service && npm ci && cd ..; fi
          if [ -d "product-service" ]; then cd product-service && npm ci && cd ..; fi
          if [ -d "order-service" ]; then cd order-service && npm ci && cd ..; fi
          if [ -d "payment-service" ]; then cd payment-service && npm ci && cd ..; fi

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Tests
        run: |
          if [ -d "auth-service" ]; then cd auth-service && npm test && cd ..; fi
          if [ -d "product-service" ]; then cd product-service && npm test && cd ..; fi
          if [ -d "order-service" ]; then cd order-service && npm test && cd ..; fi
          if [ -d "payment-service" ]; then cd payment-service && npm test && cd ..; fi

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Images
        run: |
          if [ -d "auth-service" ]; then docker build -t xblondon/auth-service:latest ./auth-service && docker push xblondon/auth-service:latest; fi
          if [ -d "product-service" ]; then docker build -t xblondon/product-service:latest ./product-service && docker push xblondon/product-service:latest; fi
          if [ -d "order-service" ]; then docker build -t xblondon/order-service:latest ./order-service && docker push xblondon/order-service:latest; fi
          if [ -d "payment-service" ]; then docker build -t xblondon/payment-service:latest ./payment-service && docker push xblondon/payment-service:latest; fi

  monitor:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Verify docker-compose.yml File Existence
        run: |
          if [ -f "docker-compose.yml" ]; then
            echo "docker-compose.yml exists!"
          else
            echo "docker-compose.yml does NOT exist!"
            exit 1
          fi

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set Up Prometheus and Grafana
        run: |
          # Ensure the docker-compose.yml file is in the root directory
          if [ -f "docker-compose.yml" ]; then
            docker-compose -f docker-compose.yml up -d prometheus grafana
          else
            echo "docker-compose.yml file not found!"
            exit 1
          fi
          
      - name: Monitor Services in Prometheus
        run: |
          curl http://localhost:9090/metrics  # Check if Prometheus is scraping metrics correctly
